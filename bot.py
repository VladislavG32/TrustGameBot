import json
import logging
import random
import os
import time
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from config import BOT_TOKEN

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
def keep_alive():
    while True:
        time.sleep(300)
        print("üîÑ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω...")

keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
keep_alive_thread.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DB_FILE = 'database.json'

def load_db():
    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_db(data):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_user_data(user_id):
    db = load_db()
    user_id_str = str(user_id)
    
    for pair_id, pair_data in db.items():
        if user_id_str in pair_data['users']:
            return pair_data, pair_id
    return None, None

# –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
class TaskManager:
    def __init__(self):
        self.used_tasks = {}
    
    def mark_used(self, pair_id, task_text, task_type):
        if pair_id not in self.used_tasks:
            self.used_tasks[pair_id] = {'truth': set(), 'dare': set()}
        self.used_tasks[pair_id][task_type].add(task_text)
    
    def is_used(self, pair_id, task_text, task_type):
        if pair_id not in self.used_tasks:
            return False
        return task_text in self.used_tasks[pair_id][task_type]
    
    def get_available_task(self, pair_id, level, task_type):
        available_tasks = [task for task in TASKS[level][task_type] 
                          if not self.is_used(pair_id, task, task_type)]
        if not available_tasks:
            # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            if pair_id in self.used_tasks:
                self.used_tasks[pair_id][task_type] = set()
            available_tasks = TASKS[level][task_type]
        return random.choice(available_tasks)

task_manager = TaskManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['/register_partner']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä—É –î–æ–≤–µ—Ä–∏—è! ü§ù\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n"
        "1. –î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "2. –ù–∞–∂–º–∏ /register_partner @username_–ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
        "3. –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "4. –ù–∞—á–Ω–∏ –∏–≥—Ä—É!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /level - –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å\n"
        "‚Ä¢ /game - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n"
        "‚Ä¢ /joker - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
        "‚Ä¢ /punishment - –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        reply_markup=reply_markup
    )

async def register_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    target_username = context.args[0] if context.args else None

    if not target_username:
        await update.message.reply_text("–£–∫–∞–∂–∏ username –ø–∞—Ä—Ç–Ω–µ—Ä–∞: /register_partner @username")
        return

    target_username = target_username.lstrip('@')
    
    if not username:
        await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!")
        return

    db = load_db()
    user_data, pair_id = get_user_data(user_id)
    
    if user_data:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ù–∞–ø–∏—à–∏ /game")
        return

    pair_found = False
    for pair_id, pair_data in db.items():
        if username in pair_data['pending_users']:
            partner_id = list(pair_data['users'].keys())[0]
            partner_username = pair_data['users'][partner_id]['username']
            
            if partner_username == target_username:
                pair_data['users'][str(user_id)] = {
                    'username': username,
                    'truth_count': 0,
                    'jokers': 1,
                    'pending_action': None,
                    'used_tasks': []
                }
                pair_data['pending_users'].remove(username)
                pair_data['current_turn'] = partner_id
                save_db(db)
                
                level_keyboard = [['/level 1', '/level 2', '/level 3']]
                level_markup = ReplyKeyboardMarkup(level_keyboard, resize_keyboard=True)
                
                try:
                    await context.bot.send_message(
                        chat_id=partner_id,
                        text=f"üéâ –í—ã —Å–≤—è–∑–∞–Ω—ã —Å @{username}!\n\n"
                             f"–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–ø–∏—à–∏ /game",
                        reply_markup=level_markup
                    )
                    await update.message.reply_text(
                        f"üéâ –í—ã —Å–≤—è–∑–∞–Ω—ã —Å @{partner_username}!\n\n"
                        f"–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–ø–∏—à–∏ /game",
                        reply_markup=level_markup
                    )
                except Exception:
                    await update.message.reply_text("‚ùå –ü–æ–ø—Ä–æ—Å–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É!")
                    db.pop(pair_id)
                    save_db(db)
                    return
                    
                pair_found = True
                break

    if not pair_found:
        new_pair_id = f"pair_{user_id}_{target_username}"
        db[new_pair_id] = {
            'users': {
                str(user_id): {
                    'username': username,
                    'truth_count': 0,
                    'jokers': 1,
                    'pending_action': None,
                    'used_tasks': []
                }
            },
            'pending_users': [target_username],
            'level': 1,
            'current_turn': str(user_id),
            'used_tasks': {'truth': [], 'dare': []}
        }
        save_db(db)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –¥–ª—è @{target_username} —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ü–æ–ø—Ä–æ—Å–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å: /register_partner @{username}"
        )

async def set_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
        return

    if not context.args:
        level_keyboard = [['/level 1', '/level 2', '/level 3']]
        reply_markup = ReplyKeyboardMarkup(level_keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üéöÔ∏è –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
            reply_markup=reply_markup
        )
        return

    try:
        new_level = int(context.args[0])
        if new_level not in [1, 2, 3]:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 1, 2 –∏–ª–∏ 3")
        return

    db = load_db()
    db[pair_id]['level'] = new_level
    save_db(db)

    level_names = {1: "‚ùÑÔ∏è –õ—ë–¥ —Ç—Ä–æ–Ω—É–ª—Å—è", 2: "üåä –ë–µ–∑–¥–æ–Ω–Ω–æ–µ –æ–∑–µ—Ä–æ", 3: "üî• –í—É–ª–∫–∞–Ω —Å—Ç—Ä–∞—Å—Ç–∏"}
    
    await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω: {level_names[new_level]}")

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
        return

    partner_id = [uid for uid in user_data['users'].keys() if uid != str(user_id)][0]
    partner_username = user_data['users'][partner_id]['username']
    current_player_id = user_data['current_turn']

    if current_player_id == str(user_id):
        action_keyboard = [['/truth', '/dare'], ['/status', '/joker']]
        reply_markup = ReplyKeyboardMarkup(action_keyboard, resize_keyboard=True)
        
        level_names = {1: "‚ùÑÔ∏è", 2: "üåä", 3: "üî•"}
        current_level = level_names[user_data['level']]
        
        await update.message.reply_text(
            f"üéÆ –¢–≤–æ–π —Ö–æ–¥! {current_level}\n\n"
            f"–í—ã–±–µ—Ä–∏ –¥–ª—è @{partner_username}:\n"
            f"‚Ä¢ /truth - –ü—Ä–∞–≤–¥–∞ ü§î\n"
            f"‚Ä¢ /dare - –î–µ–π—Å—Ç–≤–∏–µ üéØ\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –î–∂–æ–∫–µ—Ä–æ–≤: {user_data['users'][str(user_id)]['jokers']} üÉè",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(f"‚è≥ –°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å @{partner_username}. –ñ–¥–∏ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞!")

# –ë–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
TASKS = {
    1: {
        'truth': ["–ö–∞–∫–∞—è –º–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", "–ö–∞–∫–æ–π —É –º–µ–Ω—è —Å–º–µ—à–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫?"],
        'dare': ["–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º", "–°—Ñ–æ—Ç–∫–∞–π —Å–≤–æ—é —É–ª—ã–±–∫—É"]
    },
    2: {
        'truth': ["–ß–µ–≥–æ —Ç—ã –±–æ–∏—à—å—Å—è –≤ –Ω–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?", "–û —á—ë–º —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—à—å?"],
        'dare': ["–û–ø–∏—à–∏ –Ω–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å", "–ó–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–º–µ—Ö"]
    },
    3: {
        'truth': ["–ì–¥–µ —Å–∞–º–æ–µ —ç—Ä–æ—Ç–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –≥–¥–µ —Ç—ã —Ö–æ—á–µ—à—å –º–µ–Ω—è?", "–ö–∞–∫–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏—è –ø—Ä–æ –Ω–∞—Å —Å–∞–º–∞—è –∑–∞–ø—Ä–µ—Ç–Ω–∞—è?"],
        'dare': ["–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∑–∞–ø—è—Å—Ç—å—è —Å —Ç–µ–∫—Å—Ç–æ–º ¬´–ü–æ—Ü–µ–ª—É–π¬ª", "–û–ø–∏—à–∏ —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–∞–µ–¥–∏–Ω–µ"]
    }
}

PUNISHMENTS = ["–°–ø–æ–π –ø–µ—Å–Ω—é –æ –Ω–µ—É–¥–∞—á–µ", "–°–¥–µ–ª–∞–π –Ω–µ–ª–µ–ø–æ–µ —Å–µ–ª—Ñ–∏", "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—É"]

async def truth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data or user_data['current_turn'] != str(user_id):
        await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!")
        return

    current_user = user_data['users'][str(user_id)]
    if current_user['truth_count'] >= 2:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–∞–≤–¥—ã! –í—ã–±–µ—Ä–∏ –î–µ–π—Å—Ç–≤–∏–µ (/dare).")
        return

    current_user['truth_count'] += 1
    partner_id = [uid for uid in user_data['users'].keys() if uid != str(user_id)][0]
    partner_data = user_data['users'][partner_id]
    partner_data['truth_count'] = 0

    level = user_data['level']
    question = task_manager.get_available_task(pair_id, level, 'truth')
    task_manager.mark_used(pair_id, question, 'truth')

    partner_data['pending_action'] = f"–ü—Ä–∞–≤–¥–∞: {question}"
    db = load_db()
    db[pair_id]['users'][partner_id]['pending_action'] = partner_data['pending_action']
    db[pair_id]['current_turn'] = partner_id
    save_db(db)

    action_keyboard = [['/joker', '/punishment'], ['/status']]
    reply_markup = ReplyKeyboardMarkup(action_keyboard, resize_keyboard=True)
    
    level_names = {1: "‚ùÑÔ∏è", 2: "üåä", 3: "üî•"}
    
    await update.message.reply_text(
        f"ü§î –¢—ã –≤—ã–±—Ä–∞–ª(–∞) –ü–†–ê–í–î–£ –¥–ª—è @{partner_data['username']}\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
        f"–ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞! üìù"
    )
    
    await context.bot.send_message(
        chat_id=partner_id,
        text=f"ü§î –î–õ–Ø –¢–ï–ë–Ø –ü–†–ê–í–î–ê! {level_names[level]}\n\n"
             f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
             f"üìù –û—Ç–≤–µ—Ç –ø—Ä–∏—à–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ –æ–±—â–∏–π —á–∞—Ç!\n\n"
             f"–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å:\n"
             f"‚Ä¢ /joker - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–æ—Å—Ç–∞–ª–æ—Å—å: {partner_data['jokers']} üÉè)\n"
             f"‚Ä¢ /punishment - –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        reply_markup=reply_markup
    )

async def dare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data or user_data['current_turn'] != str(user_id):
        await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!")
        return

    current_user = user_data['users'][str(user_id)]
    current_user['truth_count'] = 0

    partner_id = [uid for uid in user_data['users'].keys() if uid != str(user_id)][0]
    partner_data = user_data['users'][partner_id]
    partner_data['truth_count'] = 0

    level = user_data['level']
    task = task_manager.get_available_task(pair_id, level, 'dare')
    task_manager.mark_used(pair_id, task, 'dare')

    partner_data['pending_action'] = f"–î–µ–π—Å—Ç–≤–∏–µ: {task}"
    db = load_db()
    db[pair_id]['users'][partner_id]['pending_action'] = partner_data['pending_action']
    db[pair_id]['current_turn'] = partner_id
    save_db(db)

    action_keyboard = [['/joker', '/punishment'], ['/status']]
    reply_markup = ReplyKeyboardMarkup(action_keyboard, resize_keyboard=True)
    
    level_names = {1: "‚ùÑÔ∏è", 2: "üåä", 3: "üî•"}
    
    await update.message.reply_text(
        f"üéØ –¢—ã –≤—ã–±—Ä–∞–ª(–∞) –î–ï–ô–°–¢–í–ò–ï –¥–ª—è @{partner_data['username']}\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n\n"
        f"–ñ–¥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è! üé¨"
    )
    
    await context.bot.send_message(
        chat_id=partner_id,
        text=f"üéØ –î–õ–Ø –¢–ï–ë–Ø –î–ï–ô–°–¢–í–ò–ï! {level_names[level]}\n\n"
             f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n\n"
             f"üé¨ –í—ã–ø–æ–ª–Ω–∏ –∏ –ø—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—É!\n\n"
             f"–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å:\n"
             f"‚Ä¢ /joker - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–æ—Å—Ç–∞–ª–æ—Å—å: {partner_data['jokers']} üÉè)\n"
             f"‚Ä¢ /punishment - –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        reply_markup=reply_markup
    )

async def joker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
        return

    current_user = user_data['users'][str(user_id)]
    partner_id = [uid for uid in user_data['users'].keys() if uid != str(user_id)][0]

    if current_user['jokers'] <= 0:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –î–∂–æ–∫–µ—Ä–æ–≤!")
        return

    if not current_user['pending_action']:
        await update.message.reply_text("‚ùå –¢–µ–±–µ –Ω–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å!")
        return

    current_user['jokers'] -= 1
    current_user['pending_action'] = None
    user_data['current_turn'] = partner_id

    db = load_db()
    db[pair_id]['users'][str(user_id)]['jokers'] = current_user['jokers']
    db[pair_id]['users'][str(user_id)]['pending_action'] = None
    db[pair_id]['current_turn'] = partner_id
    save_db(db)

    action_keyboard = [['/truth', '/dare'], ['/status']]
    reply_markup = ReplyKeyboardMarkup(action_keyboard, resize_keyboard=True)
    
    await update.message.reply_text("üÉè –î–∂–æ–∫–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await context.bot.send_message(
        chat_id=partner_id,
        text=f"üÉè –ü–∞—Ä—Ç–Ω–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –î–∂–æ–∫–µ—Ä! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥.\n\n"
             f"–í—ã–±–µ—Ä–∏:\n‚Ä¢ /truth - –ü—Ä–∞–≤–¥–∞\n‚Ä¢ /dare - –î–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=reply_markup
    )

async def punishment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
        return

    current_user = user_data['users'][str(user_id)]
    partner_id = [uid for uid in user_data['users'].keys() if uid != str(user_id)][0]

    if not current_user['pending_action']:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è!")
        return

    punishment_text = random.choice(PUNISHMENTS)
    current_user['pending_action'] = None
    user_data['current_turn'] = partner_id

    db = load_db()
    db[pair_id]['users'][str(user_id)]['pending_action'] = None
    db[pair_id]['current_turn'] = partner_id
    save_db(db)

    action_keyboard = [['/truth', '/dare'], ['/status']]
    reply_markup = ReplyKeyboardMarkup(action_keyboard, resize_keyboard=True)
    
    await update.message.reply_text(f"‚ö° –ù–ê–ö–ê–ó–ê–ù–ò–ï: {punishment_text}")
    await context.bot.send_message(
        chat_id=partner_id,
        text=f"‚ö° –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª –ù–∞–∫–∞–∑–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥.\n\n"
             f"–í—ã–±–µ—Ä–∏:\n‚Ä¢ /truth - –ü—Ä–∞–≤–¥–∞\n‚Ä¢ /dare - –î–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=reply_markup
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data, pair_id = get_user_data(user_id)

    if not user_data:
        await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
        return

    partner_id = [uid for uid in user_data['users'].keys() if uid != str(user_id)][0]
    partner_data = user_data['users'][partner_id]

    level_names = {1: "‚ùÑÔ∏è –õ—ë–¥ —Ç—Ä–æ–Ω—É–ª—Å—è", 2: "üåä –ë–µ–∑–¥–æ–Ω–Ω–æ–µ –æ–∑–µ—Ä–æ", 3: "üî• –í—É–ª–∫–∞–Ω —Å—Ç—Ä–∞—Å—Ç–∏"}
    current_level = level_names[user_data['level']]

    current_turn = "‚úÖ –¢–≤–æ–π —Ö–æ–¥!" if user_data['current_turn'] == str(user_id) else f"‚è≥ –û—á–µ—Ä–µ–¥—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
    
    jokers_you = user_data['users'][str(user_id)]['jokers']
    pending_action = user_data['users'][str(user_id)]['pending_action']
    action_status = f"üìã –ó–∞–¥–∞–Ω–∏–µ: {pending_action}" if pending_action else "üìã –ó–∞–¥–∞–Ω–∏—è –Ω–µ—Ç"

    status_text = (
        f"üìä –°–¢–ê–¢–£–° –ò–ì–†–´:\n\n"
        f"‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä: @{partner_data['username']}\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {current_level}\n"
        f"‚Ä¢ {current_turn}\n"
        f"‚Ä¢ –¢–≤–æ–∏ –î–∂–æ–∫–µ—Ä—ã: {jokers_you} üÉè\n"
        f"‚Ä¢ {action_status}"
    )

    await update.message.reply_text(status_text)

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("register_partner", register_partner))
    application.add_handler(CommandHandler("level", set_level))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("truth", truth))
    application.add_handler(CommandHandler("dare", dare))
    application.add_handler(CommandHandler("joker", joker))
    application.add_handler(CommandHandler("punishment", punishment))
    application.add_handler(CommandHandler("status", status))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
